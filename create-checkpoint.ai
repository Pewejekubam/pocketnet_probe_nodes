Set the Ground Rules:
Here are some protocols I want you to interpret and repeat back to me to acknowledge that you understand the development process. 
1) I will submit a description of the script 
2) I will submit changes to the script 
3) I want to discuss many of the steps of the developement to aid in my learning process 
4) You will interpret my descriptions and changes and open a discussion about them 
5) You will *NOT* create new complete versions of the script unless I direct you, or your ask me if I want it. 
6) You will offer suggestions to streamline the code, improve efficiency and create a professional output. Please acknowledge.

### 202501090744
### This is the AI prompt used to create the initial build of the Bash shell script to produce 
### a snapshot of the pocketnet blockchain

### 20250114 Team Feedback:
#  symlink "latest.7z" to the most recent snapshot archive
#  symlink "latest.md5" to the most recent md5 sum of the last snapshot archive
#  Put node version in the banner text file 'pocketcoin-cli -getinfo'
#  Seed a torrent
#  SSL 



Directive:
    -   create a bash shell script that creates a copy of the pocketnet node's
            blockchain database so it can be shared with other node operators.
    -   Include the "comment:" in the block for the user editable parameters


User editable configuration parameters:
    interactive_execution
        type: boolean
        example: true
        comment: "Setting this to 'true' enables diagnostic prompting and built-in pauses in the script"

    repository_server
        type: string
        example: storage-server01
        comment: "This host has the locally connected storage so there is limited network traffic for compression activity"

    local_process_root
        type: path
        example: /mnt/exthdd6/
        comment: "absolute path in the local file system to the directory root where all of the local processing of node data will occur.
            The path should include the trailing slash.  The resulting output will be at 'local_process_root'+'snapshot/'"

    source_node
        type: IP address
        comment: "IP address of the pocketnet node that is on the current chain"

    source_node_user
        type: string
        comment: "Name of the local user on the pocketnet node that will be used to execute 'pocketcoin-cli' commands"

    private_key
        type: path
        example: /home/sysadmin/id_ecdsa_--node--
        comment: "The absolute path in the local file system to private key that will be used to connect to the 'source_node'

    pocketnet_node_root
        type: path
        comment: "The path to the parent of the root directory in the file system of the pocketnet node.  ex: /home/pocketnet/
            the path should include the trailing slash.  The processing will assume the rest of the default pocketnet node
            directory structure begins at '.pocketcoin/'"


Non-user-editable configuration parameters:
    absolute_pocketnet_node_root
        type: path
        concatenation of 'pocketnet_node_root' + '.pocketcoin/'


Script features:
### Interactive Execution
- When `interactive_execution` is set to `true`:
    - All logging goes to both the file and the local console.
    - All user prompts are enabled, allowing for interactive execution with diagnostic prompting and built-in pauses.
- When `interactive_execution` is set to `false`:
    - All logging goes only to the file.
    - All user prompts are suppressed, allowing the script to run all the way through without any intervention.
### Logging
-   Log script metrics and vital information to local file 'create-checkpoint.log' using a 'syslog' style logging format.
### Cleanup
- Use `trap` to handle script termination and ensure proper cleanup.
- Terminate background processes and remove temporary files on the remote host to avoid orphaned processes.
### Use the latest 7-Zip  by Igor Pavlov.



Script Functions:
## Begin script
-   Suggest to the user to executed the script from repository server that has locally connected bulk storage and that
    there should be at least 250GB of free space to complete the operation.
    Display the local hostname, the free space of all local storage using the 'df' command 
    and the path of the 'local_process_root'
-   Suggest to the user to make a connection to the pocketnet node from this host with ssh prior to execution to
    ensure that the 'known_hosts' is populated to avoid the "first connection" prompt.
-   Display a prompt for the user to continue.

-   Download and extract the latest 7zip compression program:
    download link:
        https://github.com/ip7z/7zip/releases/download/24.09/7z2409-linux-x64.tar.xz
    Verify the download:
        file name matches the download
        the file is 1565344 bytes
    If download verification fails, pause and notify user.
    Extract EXCLUSIVELY the "7zzs" file from the archive into the local_process_root directory
    Delete the source archive
    Set the file mode for '7zzs' to executable


## Shutdown node
-   Connect with ssh to 'source_node' using 'private_key' and 'source_node_user'

-   Initiate shutdown of the pocketnet daemon on 'source_node'
    command: pocketcoin-cli stop

-   monitor the remote 'debug.log' on 'source_node' to ensure the node is gracefully shutdown.
    remote 'debug.log' location: 'absolute_pocketnet_node_root'+'debug.log'
    line of interest example: "2025-01-09T14:08:25Z Shutdown: done"
-   While waiting for node to shutdown, echo to local console and log file with an update every 15 seconds
-   Wait for up to 10 minutes for node to shutdown.  If the shutdown time exceeds 10 minutes, prompt the user to continue.

## Capture vital metrics
-   decrement the search in the remote 'debug.log' from the *last* line and locate "Best Header:"
    example line of interest: "2025-01-09T14:08:16Z [default wallet] SelectCoinsForStaking() : available UTXO count=10 BestHeader: 3105149 0312be4e3a531a3f6c291c76fa4f035edb1fcf07c8b3c4c64efa21332a508add"
    From that line, capture:
        log_timestamp (very beginning of that line)
        block_height ( numeric value immediately after 'BestHeader:')
        block_hash (character string immediately after the 'block_height')

## Copy from remote node to local compression host and create the archive
-   rsync the following directories on 'source_node' to 'absolute_pocketnet_node_root' using the "--delete" and "--progress" options
        source_1: 'absolute_pocketnet_node_root'+'/blocks'
        source_2: 'absolute_pocketnet_node_root'+'/indexes'
        source_3: 'absolute_pocketnet_node_root'+'/pocketdb'        
        target: 'local_process_root'+'snapshot/'
-   Test volume of captured data.  'absolute_pocketnet_node_root' should be at least 100G
    If volume of data is not at least 100G:
        Echo to local console that captured volume is suspect invalid due to unexpected volume of data.
        Pause script execution with a prompt for the local user to continue to the COMPRESSION phase
            or stop execution to investigate manually.

## Start the pocketcoind daemon on the remote node
-   Connect to 'source_node' and start the pocketcoind daemon using this command:
    'pocketcoind -daemon'
-   Monitor the remote 'debug.log' to ensure the node starts correctly
    Tail the live remote 'debug.log' to the local console
    Look for "init message: Done loading" in the remote 'debug.log'
        example line of interest: "2025-01-09T15:10:01Z init message: Done loading"
-   Wait for up to 3 minutes for the 'line of interest'
    If 'line of interest' is not found before the timeout period:
        Log and echo to local console: "Suspect 'source_node' not online" 
-   Log the hostname of the 'source_node' plus the entire 'line of interest'.

## Compress the archive
-   In the 'local_process_root':
        Use 7zzs to create a new archive called 'snapshot'+'-'+'block_height'.7z
        Use maximum compression
        Add the directories '/blocks', '/indexes', '/pocketdb' to the archive
-   create an MD5SUM of the archive

## Create the snapshot "Banner" 
-   Create a text file named 'snapshot-'+block_height+time stamp(formatted as: YYYYMMDD)
-   First Line: "Pocketnet Blockchain Snapshot"
-   Second Line: Time stamp from the 'line of interest' above + block_height + block_hash
-   Third Line: "MD5SUM" + the md5sum of the created archive
-   Fourth Line: size of the created archive in BYTES and GIGABYTES
-   Fifth Line: "Brought to you by AmericanPatriotDave"
Example Banner:
    Pocketnet Blockchain Snapshot
    2024-12-13T02:20:17Z 3065692 0c66f2ce879ff84251fa0c8b82cd1e18365af1d4b611e8756d14d8e21c913d91
    MD5: 40755a9dfe7852c0e3e87777972ee9b5 
    snapshot-3065692.7z
    30,825,168,896 bytes / 29G 
    Brought to you by AmericanPatriotDave


## Prompt user to end
-   Prompt user:
        Print "Banner"
        Print "If everything looks good, you can continue and the node's database copy will be deleted from the local file system.  
            Otherwise you can kill execution here to keep the database copy."

